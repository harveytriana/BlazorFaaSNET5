@using System.Text.Json
@using Client.Utils;
@page "/fn-dollar-price"
@inject HttpClient _httpClient

<h2>Dollar Price Azure Function</h2>
<hr />
<p>This component demonstrates a Http Trigger</p>
<br />
@if (ls != null)
{
	<h4>Select Currency</h4>
	<select class="form-control" @onchange="ChangeCurrency">
		@foreach (var i in ls.Keys)
		{
		 <option value="@i">@i @ls[i]</option>
		}
	</select>
	<br>
	<hr>
	<h4>Dollar Price for @currency</h4>
	<div class="result">
		@currencySymbol	@dollarPrice
	</div>
	<p class="prompt">@prompt</p>
}

@code {
	record DollarPrice(DateTime TimeStamp, string Currency, string CurrencySymbol, decimal Price);

	IDictionary<string, string> ls;

	string currency;
	string currencyText;
	string currencySymbol;
	bool busy;
	string dollarPrice;
	string prompt;

	protected override async Task OnInitializedAsync()
	{
		var js = ResourceReader.Read("cl-currencies.json");

		ls = JsonSerializer.Deserialize<IDictionary<string, string>>(js);

		// initilize value
		await Task.Delay(300);
		currency = "EUR";
		await GetDollarPrice();
	}

	async Task ChangeCurrency(ChangeEventArgs e)
	{
		var y = e.Value.ToString();
		if (currency != y)
		{
			currency = y;
			currencyText = ls[currency];
			await GetDollarPrice();
		}
	}

	async Task GetDollarPrice()
	{
		if (busy)
		{
			return;
		}
		busy = true;
		try
		{
			var functionUrl = $"api/DollarPrice?currency={currency}";
			var data = await _httpClient.GetFromJsonAsync<DollarPrice>(functionUrl);
			if (data != null) {// update UI
				dollarPrice = data.Price.ToString("#,##0.00");
				currencySymbol = data.CurrencySymbol;
				prompt = $"Time Stamp: {data.TimeStamp}";
			}
			else {
				prompt = $"Unexpectedly returns null";
			}
		}
		catch (Exception e)
		{
			prompt = $"Exception: {e.Message}";
		}
		busy = false;
	}
}
